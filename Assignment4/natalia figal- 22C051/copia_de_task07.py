# -*- coding: utf-8 -*-
"""Copia de Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LFYOLeZbEXPOlEDDN95tgMpbKShRPxt4

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
from rdflib import FOAF
from rdflib.plugins.sparql import prepareQuery
from rdflib.namespace import RDF, RDFS
from rdflib import Graph, Namespace, Literal
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace(
    "http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results

# for r in g.query(q1):
#  print(r)


ns = Namespace("http://somewhere#")

q1 = prepareQuery('''
SELECT ?subject
WHERE {
    ?subject rdfs:subClassOf* ns:LivingThing
}                      
''',
initNs = { "rdfs": RDFS, "ns": ns}
)
print("7.1 Version 1")
for r in g.query(q1):
    print(r.subject)

print("7.1 Version 2")
def buscaSubclases(s_object: str):
    for s, p, o in g.triples((None, RDFS.subClassOf, s_object)):
        print(s)
        buscaSubclases(s)


buscaSubclases(ns.LivingThing)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""
q2 = prepareQuery('''
SELECT ?subject
WHERE {
    ?subject rdf:type/rdfs:subClassOf* ns:Person
}                      
''',
initNs = { "rdf": RDF, "rdfs": RDFS, "ns": ns}
)

print("7.2 Version 1")

for r in g.query(q2):
  print(r.subject)

print("7.2 Version 2")
def buscaIndividuos(s_object: str):
     for s, p, o in (g.triples((None, RDFS.subClassOf, s_object))):
         getAllIndivituals(s)
         buscaIndividuos(s)

def getAllIndivituals(s_object : str):
    for s,p,o in g.triples((None, RDF.type, s_object)):
        print(s)

getAllIndivituals(ns.Person)
buscaIndividuos(ns.Person)


# TO DO
# Visualize the results

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""
q3 = prepareQuery('''
SELECT ?subject ?predicate ?object
WHERE {
     {
          ?subject ?predicate ?object .
          ?subject rdf:type ns:Animal .                
     }
     UNION
     {
          ?subject ?predicate ?object .
          ?subject rdf:type ns:Person .                
     }
}
''',
initNs={"rdf": RDF, "ns": ns}
)

# Visualize the results
print("7.3 Version 1")
for r in g.query(q3):
    print(r.subject, r.predicate, r.object)

print("7.3 Version 2")


def buscaTodasPropiedades(s_object: str):
    for s1, p1, o1 in g.triples((None, RDF.type, s_object)):
        for s2, p2, o2 in g.triples((s1, None, None)):
            print(s2, p2, o2)


buscaTodasPropiedades(ns.Person)
buscaTodasPropiedades(ns.Animal)


# TO DO
# Visualize the results

"""**TASK 7.4:  List the name of the persons who know Rocky**"""


q4 = prepareQuery('''
SELECT  ?Subject ?subjectName
WHERE {
    ?Subject foaf:knows ns:RockySmith.
    ?Subject <http://www.w3.org/2001/vcard-rdf/3.0/Given>  ?subjectName .
  }
  ''',
initNs={"foaf": FOAF, "ns": ns}
)
print("7.4")
for r in g.query(q4):
    print(r.subjectName)


"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
# Visualize the results

q5 = prepareQuery('''
SELECT ?Subject ?knowsSubject
WHERE {
      ?Subject foaf:knows ?knowsSubject .
}
GROUP BY ?Subject 
HAVING (COUNT(DISTINCT ?knowsSubject) >= 2)
    
''',
initNs={"foaf": FOAF, "ns": ns}
)

# Visualize the results
print("7.5")
for r in g.query(q5):
    print(r.Subject)
