# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15PO-cbMfcZpar3LNK3mHEeGAKlHKTwwN

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal, FOAF
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
#SPARQL
print('SPARQL 1')
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
ns = Namespace("http://somewhere#")
from rdflib.plugins.sparql import prepareQuery
q1 = prepareQuery('''
  SELECT distinct ?Subject
  WHERE {
    ?Subject rdfs:subClassOf* ns:LivingThing.
  }
  ''',
  initNs = {"ns": ns, "rdfs": RDFS}
)
for r in g.query(q1):
  print(r)
# RDFlib
print('RDFlib 1')
for s,p,o in g.triples((None,RDF.type,RDFS.Class)):
    if (s,RDFS.subClassOf,ns.LivingThing) in g:
      print(s)
# Visualize the results



"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""
print('SPARQL 2')
q2 = prepareQuery('''
  SELECT ?person WHERE {
  {
  { ?person rdf:type ?tipo.
    ?tipo rdf:subClassOf ns:Person.}
  UNION { ?person rdf:type ns:Person.}
  }
  }
  ''',
  initNs = { "vcard": VCARD, "ns": ns, "RDFS": RDFS, "rdf":RDF}
)
print('RDFlib 2')
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  print(s)
for s1,p1,o1 in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s2,p2,o2 in g.triples((None, RDF.type, s1)):
    print(s2)

# Visualize the results

for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
print('SPARQL 3')
q3 = prepareQuery('''
  SELECT ?person ?pers_properties ?animal ?animal_properties WHERE {
  ?person rdf:type ns:Person.
  ?animal rdf:type ns:Animal.
  ?person ?pers_properties ?predicate.
  ?animal ?animal_properties ?predicate.
  }
  ''',
  initNs = { "vcard": VCARD, "ns": ns, "RDFS": RDFS}
)
# Visualize the results

for r in g.query(q3):
  print(r)
# Visualize the results
print('RDFlib 3')

for s, p, o in g.triples((None, RDF.type, ns.Person)):
  for s1, p1, o1 in g.triples((s, None, None)) :
    print (s1, p1, o1)
for s, p, o in g.triples((None, RDF.type, ns.Animal)):
  for s1, p1, o1 in g.triples((s, None, None)) :
    print (s1, p1, o1)


"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
print('SPARQL 4')
q4 = prepareQuery('''
  SELECT ?persons WHERE {
  ?persons rdf:type ns:Person.
  ?persons foaf:knows ns:RockySmith
 }
  ''',
  initNs = { "vcard": VCARD, "ns": ns, "RDFS": RDFS, "foaf": FOAF}
)
# Visualize the results

for r in g.query(q4):
  print(r)
# Visualize the results

print('RDFlib 4')

for s, p, o in g.triples((None, FOAF.knows, ns.RockySmith)):
  print(s)


"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
print('SPARQL 5')
q5 = prepareQuery('''
  SELECT DISTINCT ?entity
    WHERE {
        ?entity FOAF:knows ?entity1.
        ?entity FOAF:knows ?entity2.
        FILTER (?entity1 != ?entity2)
    }
  ''',
  initNs = { "vcard": VCARD, "ns": ns, "RDFS": RDFS, 'FOAF': FOAF}
)
# Visualize the results

for r in g.query(q5):
  print(r)

print('RDFlib 5')
cantidad_de_conocidos = {}
for s, p, o in g.triples((None, FOAF.knows, None)):
   if s in cantidad_de_conocidos:
            cantidad_de_conocidos[s] += 1
   else:
       cantidad_de_conocidos[s] = 1
entitiesWith2 = []
for key, value in cantidad_de_conocidos.items():
  if value >= 2:
    entitiesWith2.append(key)
print(entitiesWith2)



