# -*- coding: utf-8 -*-
"""Copia de Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cNoLywHkzxAhUWq9LQFOpUVnW5-3kKK7

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery

ns=Namespace("http://somewhere#")


##SPARQL

clases=set()

def rec_subclass(clase):
  if clase in clases:
    return
  clases.add(clase)
  q1 = prepareQuery('''
  SELECT ?Subject WHERE{
    ?Subject rdfs:subClassOf ?Superclass.
  }
  ''',
  initNs = {"rdfs" : RDFS, "ns": ns})
  for r in g.query(q1, initBindings={'Superclass': clase}):
    rec_subclass(r.Subject)

rec_subclass(ns.LivingThing)
for i in clases:
  print(i)

print()

##RDFlib

clases2=set()

def rec_subclass2(clase):
  if clase in clases2:
    return
  clases2.add(clase)
  for s,p,o in g.triples((None, RDFS.subClassOf, clase)):
    rec_subclass2(s)

rec_subclass2(ns.LivingThing)
for i in clases2:
  print(i)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

##SPARQL

clases=set()

def elems(i):
  q1 = prepareQuery('''
  SELECT ?Subject WHERE{
    ?Subject RDF:type ?Superclass.
  }
  ''',
  initNs = {"RDF" : RDF})
  for r in g.query(q1, initBindings={'Superclass': i}):
    print(r.Subject)

rec_subclass(ns.Person)
for i in list(clases):
  elems(i)

print()

##RDFlib

clases2=set()
rec_subclass2(ns.Person)
for i in list(clases2):
  for s,p,o in g.triples((None, RDF.type, i)):
      print(s)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

##SPARQL

q1 = prepareQuery('''
  SELECT ?Subject ?propiedad ?valor
  WHERE{
    {?Subject RDF:type ns:Animal.
    ?Subject ?propiedad ?valor.}
    UNION
    {?Subject RDF:type ns:Person.
    ?Subject ?propiedad ?valor.}
  }
  ''',
  initNs = {"RDF" : RDF, "ns": ns}
)

for r in g.query(q1):
  print(r.Subject, r.propiedad, r.valor)

print()

##RDFlib

for s,p,o in g.triples((None, RDF.type, ns.Person)):
  for s2,p2,o2 in g.triples((s, None, None)):
    print(s2,p2,o2)

for s,p,o in g.triples((None, RDF.type, ns.Animal)):
  for s2,p2,o2 in g.triples((s, None, None)):
    print(s2,p2,o2)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

foaf=Namespace("http://xmlns.com/foaf/0.1/")
vcard=Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

##SPARQL

q1 = prepareQuery('''
  SELECT ?nombre
  WHERE{
    ?Subject foaf:knows ns:RockySmith.
    ?Subject RDF:type ns:Person.
    ?Subject vcard:FN ?nombre.
  }
  ''',
  initNs = {"RDF" : RDF, "ns": ns, "foaf": foaf, "vcard":vcard}
)

for r in g.query(q1):
  print(r.nombre)

print()

##RDFlib

for s,p,o in g.triples((None, foaf.knows, ns.RockySmith)):
  for s2,p2,o2 in g.triples((s, RDF.type, ns.Person)):
    for s3,p3,o3 in g.triples((s, vcard.FN, None)):
      print(o3)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

foaf=Namespace("http://xmlns.com/foaf/0.1/")

##SPARQL

q1 = prepareQuery('''
  SELECT ?Subject ?persona
  WHERE{
    ?Subject foaf:knows ?persona.
  }
  GROUP BY ?Subject
  HAVING (COUNT(DISTINCT ?persona) >= 2)
  ''',
  initNs = {"foaf": foaf}
)

for r in g.query(q1):
  print(r.Subject)

print()

#RDFlib

conocidos={}
for s,p,o in g.triples((None, foaf.knows, None)):
  if s in conocidos:
    conocidos[s] += 1
  else:
    conocidos[s] = 1

for clave, valor in conocidos.items():
  if valor>=2:
    print(clave)