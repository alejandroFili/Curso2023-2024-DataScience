# -*- coding: utf-8 -*-
"""Copia de Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oHA_g2gW-bvrbaC928LVxuiv66k_aTCb

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from types import prepare_class
from rdflib.plugins.sparql import prepareQuery
from rdflib.namespace import RDF, RDFS
ns = Namespace("http://somewhere#")
# TO DO
# Visualize the results
q1 =prepareQuery('''
  SELECT * WHERE {
      ?Subject rdfs:subClassOf ns:LivingThing.
      Optional{?x rdfs:subClassOf ?Subject}
  }
''', initNs =  { "ns":ns,"rdfs":RDFS}
)

for s,p in g.query(q1):
   print(s,p)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results


q2 = prepareQuery('''
  SELECT * WHERE
  {

    {?Subject rdf:type ns:Person}
    union
    {
      ?S rdfs:subClassOf ns:Person.
      ?Subject rdf:type ?S
    }
  }

''', initNs =  { "ns":ns,"rdf":RDF,"rdfs":RDFS}
)

for r,s in g.query(q2):
   print(s)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
# Visualize the results
q3 = prepareQuery('''
  SELECT ?Subject ?Subject2 ?p WHERE
  {

    {
      ?Subject rdf:type ns:Person.
      OPTIONAL { ?Subject ?p ?o}
    }
    union
    {
      ?Subject rdf:type ns:Animal.
      OPTIONAL { ?Subject ?p ?o }
    }


  }

''', initNs =  { "ns":ns,"rdf":RDF,"rdfs":RDFS}
)

for r in g.query(q3):
   print(r.Subject,r.p)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

FOAF = Namespace("http://xmlns.com/foaf/0.1/")
q4 = prepareQuery('''
  SELECT ?conoce WHERE
  {
    ?conoce foaf:knows ns:RockySmith.
  }

''', initNs =  { "ns":ns,"rdf":RDF,"rdfs":RDFS,"foaf":FOAF}
)

for r in g.query(q4):
   print(r.conoce)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

q5 = prepareQuery('''
  SELECT ?subject ?o WHERE
  {
    ?subject foaf:knows ?o.

  }

''', initNs =  { "ns":ns,"rdf":RDF,"rdfs":RDFS,"foaf":FOAF}
)
for r in g.query(q5):
   print(r.subject,r.o)