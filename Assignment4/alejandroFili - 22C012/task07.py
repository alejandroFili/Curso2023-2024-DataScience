# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPniC8cCIRK0ofpUQK_h0bcNOa4CroCF

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

ns = Namespace("http://somewhere#")

"""**TASK 7.1: List all subclasses (at any level of hierarchy, including indirect subclasses) of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery

livingThing_query = prepareQuery('''
SELECT ?subClase
WHERE {
    ?subClase rdfs:subClassOf* ns:LivingThing
}                      
''',
initNs = { "rdfs": RDFS, "ns": ns}
)
# Visualize the results
print("7.1 - SPARQL")
for r in g.query(livingThing_query):
  print(r.subClase)

print("7.1 - ONLY RDFLIB")
def getAllSubclases(parent: str):
     for s, p, o in g.triples((None, RDFS.subClassOf, parent)):
         print(s)
         getAllSubclases(s)

getAllSubclases(ns.LivingThing)

"""**TASK 7.2: List all individuals of "Person" (and all it's subclasses) with RDFLib and SPARQL**"""

# TO DO
# from rdflib.plugins.sparql import prepareQuery

person_query = prepareQuery('''
SELECT ?person
WHERE {
    ?person rdf:type/rdfs:subClassOf* ns:Person
}                      
''',
initNs = { "rdf": RDF, "rdfs": RDFS, "ns": ns}
)
# Visualize the results
print("7.2 - SPARQL")
for r in g.query(person_query):
  print(r.person)

print("7.2 - ONLY RDFLIB")
def getAllSubclasesIndividuals(parent: str):
     for s, p, o in g.triples((None, RDFS.subClassOf, parent)):
         getAllIndivituals(s)
         getAllSubclasesIndividuals(s)

def getAllIndivituals(indType : str):
    for s,p,o in g.triples((None, RDF.type, indType)):
        print(s)

getAllIndivituals(ns.Person)
getAllSubclasesIndividuals(ns.Person)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
# from rdflib.plugins.sparql import prepareQuery

query_3 = prepareQuery('''
SELECT ?subject ?predicate ?object
WHERE {
     {
          ?subject ?predicate ?object .
          ?subject rdf:type ns:Animal .                
     }
     UNION
     {
          ?subject ?predicate ?object .
          ?subject rdf:type ns:Person .                
     }

}
''',
initNs = { "rdf": RDF, "rdfs": RDFS, "ns": ns}
)

# Visualize the results
print("7.3 - SPARQL")
for r in g.query(query_3):
  print(r.subject, r.predicate, r.object)

print("7.3 - ONLY RDFLIB")
def getAllData(subject: str):
    for s,p,o in g.triples((subject, None, None)):
        print(s,p,o)

def getAllDataIndivituals(indType : str):
    for s,p,o in g.triples((None, RDF.type, indType)):
        getAllData(s)

getAllDataIndivituals(ns.Person)
getAllDataIndivituals(ns.Animal)


"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
# from rdflib.plugins.sparql import prepareQuery
from rdflib import FOAF
from rdflib import XSD
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

query_4 = prepareQuery('''
SELECT ?Rocky_URI  ?amigo_URI ?amigo_name
WHERE {
     ?Rocky_URI vcard:Given "Rocky"^^xsd:string . 
     ?amigo_URI foaf:knows ?Rocky_URI .
     ?amigo_URI vcard:Given  ?amigo_name . 
                                   
}
''',
initNs = {"xsd":XSD, "foaf": FOAF , "ns" : ns, "vcard": VCARD}
)

# Visualize the results
print("7.4 - SPARQL")
for r in g.query(query_4):
     print(r.amigo_name)


print("7.4 - RDFLIB ONLY")
for rocky_uri in g.subjects(VCARD.Given, Literal('Rocky', datatype= XSD.string)):
    for amigo_uri in g.objects(rocky_uri, FOAF.knows):
        for amigo_name in g.objects(amigo_uri, VCARD.Given):
            print(amigo_name)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO

# from rdflib.plugins.sparql import prepareQuery
# from rdflib import FOAF
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

query_5 = prepareQuery('''
SELECT ?entity ?relatedEntity
WHERE {
      ?entity foaf:knows ?relatedEntity .

}
GROUP BY ?entity 
HAVING (COUNT(DISTINCT ?relatedEntity) >= 2)
    
''',
initNs = { "foaf": FOAF , "ns" : ns, "vcard": VCARD}
)

# Visualize the results
print("7.5 - SPARQL")
for r in g.query(query_5):
     print(r.entity)

print("7.5 - RDFLIB ONLY")
know_dict = {}

for entity in g.subjects(FOAF.knows, None):
    current_key = str(entity)
    know_dict.setdefault(current_key,0)
    know_dict[current_key] += 1

for key, value in know_dict.items():
    if value >= 2:
        print(key)

