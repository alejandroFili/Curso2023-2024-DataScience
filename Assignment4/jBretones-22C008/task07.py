# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NWAzsUCs4pudYPEGK3zpebxC7pEnIH1p

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results

ns = Namespace("http://somewhere#")
from rdflib.plugins.sparql import prepareQuery

# CODIGO EN RDFLib

for s,p,o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)

# CODIGO EN SPARQL

q1 = '''
  SELECT distinct ?subclass
  WHERE
  {
    ?subclass rdfs:subClassOf ns:LivingThing.
  }
  '''

for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results


# CODIGO EN RDFLib

for s,p,o in g.triples((None, RDF.type, ns.Person)):
  print(s)
for s1,p1,o1 in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s2,p2,o2 in g.triples((None, RDF.type, s1)):
    print(s2)

# CODIGO EN SPARQL

q2 = '''
  SELECT distinct ?individuals
  WHERE
  {
    {
      ?individuals rdf:type ns:Person.
    }
    union
    {
      ?subclass rdfs:subClassOf ns:Person.
      ?individuals a ?subclass
    }
  }
  '''

for r in g.query(q2):
  print(r)

# TO DO
# Visualize the results

# CODIGO EN RDFLib

for s1,p1,o1 in g.triples((None, RDF.type, ns.Person)):
  for s2, p2, o2 in g.triples((s1, None, None)) :
    print (s2, p2, o2)
for s1,p1,o1 in g.triples((None, RDF.type, ns.Animal)):
  for s2, p2, o2 in g.triples((s1, None, None)) :
    print (s2, p2, o2)


# CODIGO EN SPARQL

q3 = '''
  SELECT distinct ?individuals ?property ?value
  WHERE
  {
    ?sub rdfs:subClassOf ns:LivingThing.
    ?individuals a ?sub.
    ?individuals ?property ?value.
  }
  '''

for r in g.query(q3):
  print(r)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
# Visualize the results

# CODIGO EN RDFLib

for s1,p1,o1 in g.triples((None, RDF.type, ns.Person)):
  for s2, p2, o2 in g.triples((s1, None, None)) :
    print (s2, p2, o2)
for s1,p1,o1 in g.triples((None, RDF.type, ns.Animal)):
  for s2, p2, o2 in g.triples((s1, None, None)) :
    print (s2, p2, o2)


# CODIGO EN SPARQL

q3 = '''
  SELECT distinct ?individuals ?property ?value
  WHERE
  {
    ?sub rdfs:subClassOf ns:LivingThing.
    ?individuals a ?sub.
    ?individuals ?property ?value.
  }
  '''

for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
# Visualize the results
from rdflib import FOAF

# CODIGO EN RDFLib

for s1,p1,o1 in g.triples((None, FOAF.knows, ns.RockySmith)) :
    print (s1)


# CODIGO EN SPARQL

q4 = '''
  SELECT distinct ?persons
  WHERE
  {
    ?persons foaf:knows ns:RockySmith.
  }
  '''
for r in g.query(q4):
  print(r)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
# Visualize the results
from rdflib import FOAF

# CODIGO EN RDFLib

Persons = []
for s1,p1,o1 in g.triples((None, FOAF.knows, None)) :
    if s1 in Persons:
      print(s1)
    Persons += [s1]