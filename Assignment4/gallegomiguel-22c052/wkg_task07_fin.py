# -*- coding: utf-8 -*-
"""WKG_TASK07_FIN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tHwWmj2rFnzjfKNtyWLQmMBmI8qeUwNg

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery

ns = Namespace("http://somewhere#")

q1 = prepareQuery('''
SELECT DISTINCT ?SubC
WHERE {
  ?SubC rdfs:subClassOf ns:LivingThing.
}
''',
initNs = {"rdfs":RDFS, "ns":ns}
)
# Visualize the results

for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

q2 = prepareQuery('''
SELECT DISTINCT ?Pe
WHERE {
  {
    ?Pe rdf:type ns:Person.
  } UNION {
    ?x rdfs:subClassOf ns:Person.
    ?Pe rdf:type ?x
  }
}
''',
initNs = {"rdf":RDF, "ns":ns, "rdfs":RDFS}
)

# Visualize the results
for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

q3 = prepareQuery('''
SELECT DISTINCT ?Vivo ?Enlace ?Complement
WHERE {
  {
    ?Vivo rdf:type ns:Person.
  } UNION {
    ?Vivo rdf:type ns:Animal.
  }
  ?Vivo ?Enlace ?Complement.
}
''',
initNs = {"rdf":RDF, "ns":ns}
)

# Visualize the results
for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

foaf = Namespace("http://xmlns.com/foaf/0.1/")

q4 = prepareQuery('''
SELECT DISTINCT ?Pe
WHERE {
  {
    ?Pe rdf:type ns:Person.
  } UNION {
    ?subC rdfs:subClassOf ns:Person.
  }
  ?Pe foaf:knows ns:RockySmith.
}
''',
initNs = {"foaf":foaf, "ns":ns, "rdf": RDF, "rdfs":RDFS}
)

# Visualize the results
for r in g.query(q4):
  print(r)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

q5 = prepareQuery('''
SELECT DISTINCT ?Pe
WHERE {
  ?Pe foaf:knows ?x.
  ?Pe foaf:knows ?y.
  FILTER (?x != ?y)
}
''',
initNs = {"foaf":foaf}
)

# Visualize the results
for r in g.query(q5):
  print(r)