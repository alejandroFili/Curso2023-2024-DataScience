# -*- coding: utf-8 -*-
"""trask07corr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19VsYKn9L_0kjon4D8PcATQMtzOuQ-bK3

# **Task07.ipynb**

Daniel Llopis, 21C033

Primero leemos el grafo
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"


from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")
rdfs = Namespace("http://www.w3.org/2000/01/rdf-schema#")

"""7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL"""

# TO DO
from rdflib.plugins.sparql import prepareQuery


livingThing_query = prepareQuery('''
SELECT distinct ?subClass
WHERE {
    ?subClass rdfs:subClassOf* ns:LivingThing
}
''',
initNs = { "rdfs": RDFS, "ns": ns}
)
# Visualize the results

for r in g.query(livingThing_query):
  print(r)


def fun_subclasses(g,class_name):
  subclasses = set()
  for s,p,o in g.triples((None,RDF.type,RDFS.Class)):
    if (s,RDFS.subClassOf,class_name) in g:
      subclasses.add(s)
      subclasses.update(fun_subclasses(g,s))
  return subclasses
subclasses_lt = fun_subclasses(g,ns.LivingThing)
for subclass in subclasses_lt:
  print(subclass)

""" 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)"""

from typing_extensions import Type
# TO DO

rdf = Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#")

q2=prepareQuery('''
SELECT ?subject
where{
?subject rdf:type/rdfs:subClassOf* ns:Person
}
''',
    initNs={"rdf":RDF, "ns":ns}
)

for r in g.query(q2):
  print(r)



# RDFlib

def individuals(obj):
  type = g.triples((None, RDF.type, obj))
  if type is not None:
    for s1, p1, o1 in type:
      print(s1)

  subclass = g.triples((None, RDFS.subClassOf, obj))
  if subclass is not None:
    for sHijo, pHijo, oHijo in subclass:
      individuals(sHijo)

individuals(ns.Person)

"""7.3 List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person"""

# TO DO

# Create a set to store the individuals of "Person" or "Animal"
individuals = set()

# Create a set of classes to include "Person" and "Animal"
classes_to_include = {ns.Person, ns.Animal}

for subject, predicate, object_ in g.triples((None, RDF.type, None)):
    if object_ in classes_to_include:
        individuals.add(subject)

for individual in individuals:
    print("Individual:", individual)
    for s, p, o in g.triples((individual, None, None)):
        print(f" Property: {p}, Value: {o}")

q3 = prepareQuery('''
    SELECT distinct ?individual ?property ?x
    WHERE {
        {
          ?individual a ns:Person.
        }
        UNION
        {
          ?individual a ns:Animal.
        }
        ?individual ?property ?x
    }
    ''',
    initNs = {"rdfs": rdfs, "rdf": rdf, "ns": ns}
)

for r in g.query(q3):
  print(r)

""" 7.4: List the name of the persons who know Rocky"""

from rdflib import FOAF
FOAF = Namespace("http://xmlns.com/foaf/0.1/")
VCARD= Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

for s,p,o in g.triples((None, FOAF.knows, ns.RockySmith)):
  for s1,p1,o1 in g.triples((s, VCARD.Given, None)):
    print(o1)



q4 = prepareQuery('''
    SELECT ?name
    WHERE{
            ?subject FOAF:knows ns:RockySmith.
            ?subject <http://www.w3.org/2001/vcard-rdf/3.0/Given> ?name
    }''',
                  initNs = {"ns": ns, "FOAF":FOAF}
    )
for r in g.query(q4):
  print(r)

"""7.5: List the entities who know at least two other entities in the graph"""

# TO DO

count = {}
for s, p, o in g.triples((None, FOAF.knows, None)):
  count[s] = count.get(s,0)+1
entities = []
for key, value in count.items():
  if value >= 2:
    entities.append(key)
print(entities)

query_5 = prepareQuery('''
SELECT ?entity ?relatedEntity
WHERE {
      ?entity foaf:knows ?relatedEntity .

}
GROUP BY ?entity
HAVING (COUNT(DISTINCT ?relatedEntity) >= 2)

''',
initNs = { "foaf": FOAF , "ns" : ns, "vcard": VCARD}
)

# Visualize the results

for r in g.query(query_5):
     print(r.entity)