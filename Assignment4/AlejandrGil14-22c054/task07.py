# -*- coding: utf-8 -*-
"""Copia de Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p1nwbCPbiXfAaTztPaOyKjasQ1_gzwEd

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS, FOAF
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
ns = Namespace("http://somewhere#")
q1 = prepareQuery('''
  SELECT ?subclass
  WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing.
  }
  ''',
  initNs = { "ns": ns, "rdfs": RDFS}
)

#rdflib
for s,p,o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)
# Visualize the results
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
q2 = prepareQuery('''
  SELECT ?sujeto
  WHERE {
    ?sujeto rdfs:subClassOf* ns:Person.
  }
  ''',
  initNs = { "ns": ns, "rdfs": RDFS}
)

#rdflib
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  print(s)
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s1,p1,o1 in g.triples((None, RDF.type, s)):
    print(s1)

# Visualize the results
for r in g.query(q2):
  print(r.sujeto)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
q1 = prepareQuery('''
    SELECT ?individuo ?relacion
    WHERE{
    {
            ?individuo a ns:Animal.
            ?individuo ?relacion ?objeto
            }
            UNION
            {
            ?individuo a ns:Person.
            ?individuo ?relacion ?objeto
            }

    }''', initNs = {"rdf": RDF, "ns": ns}
)

# rdflib
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  for s1,p1,o1 in g.triples((s, None, None)):
    print(s1, p1, o1)
for s,p,o in g.triples((None, RDF.type, ns.Animal)):
  for s1,p1,o1 in g.triples((s, None, None)):
    print(s1)

# Visualize the results
for r in g.query(q1):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
q4 = prepareQuery('''
  SELECT ?nombre
  WHERE {
    ?nombre FOAF:knows ns:RockySmith.
  }
  ''', initNs={'ns':ns, 'FOAF':FOAF})

# Visualize the results

for r in g.query(q4):
  print(r)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
q5 = prepareQuery("""
    SELECT ?sujeto
    WHERE {
        ?sujeto foaf:knows ?other1 .
        ?sujeto foaf:knows ?other2 .
        FILTER (?other1 != ?other2)
    }
""",initNs={"ns": ns, "foaf":FOAF})

# Visualize the results
for r in g.query(q5):
  print(r)