# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.


**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")
vcard = Namespace("http://www.w3.orq/2001/vcard-rdf/3.0#")
for s,p,o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)
q1 = prepareQuery("SELECT ?x WHERE {?x rdfs:subClassOf ns:LivingThing}", initNs = {"rdfs": RDFS, "ns": ns})
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results
for persona, p, o in g.triples((None,RDF.type, ns.Person)):
  print(persona)
for subclase, p ,o in g.triples((None, RDFS.subClassOf,ns.Person)):
  for persona, p, o in g.triples((None, RDF.type,subclase)):
    print(persona)
q1 = prepareQuery("SELECT ?x ?y WHERE {?x rdf:type/rdfs:subClassOf* ns:Person}", initNs = {"rdf":RDF, "ns": ns})
for r in g.query(q1):
  print(r)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
# Visualize the results
for elem,p,o in g.triples((None, RDF.type, ns.Animal)):
  for s,t,u in g.triples((elem, None,None)):
    print(s,t,u)
q1 = prepareQuery('''
  SELECT ?x ?relacion
  WHERE{
    ?x rdf:type ns:Animal.
    ?x ?relacion ?a
  }''', initNs = {"rdf": RDF, "ns": ns}
)
for r in g.query(q1):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
# Visualize the results
FOAF = Namespace("http://xmlns.com/foaf/0.1/")
for persona,p,o in g.triples((None, RDF.type, ns.Person)):
  for a,q,r in g.triples((None, FOAF.knows, persona)):
    print(a)
q1 = prepareQuery('''
  SELECT DISTINCT ?x
  WHERE{
    ?x rdf:type ns:Person.
    ?x FOAF:knows ns:RockySmith
  }''', initNs = {"rdf": RDF, "ns": ns, "FOAF": FOAF}
  )
for r in g.query(q1):
  print(r)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
# Visualize the results
lista = []
lista_def = []
for n,s, o in g.triples((None, FOAF.knows, None)):
  if s in lista:
    lista_def += [s]
  lista += [s]
print(lista_def)
q1 = prepareQuery('''
  SELECT DISTINCT ?x
  WHERE{
    ?x FOAF:knows ?y
  }''', initNs = {"rdf": RDF, "ns": ns, "FOAF":FOAF}
)
for r in g.query(q1):
  print(r)